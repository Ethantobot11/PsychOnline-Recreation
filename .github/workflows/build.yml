name: Build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      os:
        required: true
        type: string
      buildArgs:
        required: true
        type: string
      artifactName:
        required: true
        type: string
      artifactPath:
        required: true
        type: string

env:
  HAXE_VERSION: 4.3.6
  PROJECT_NAME: PsychOnline

jobs:
  build:
    name: Build
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: ${{ env.HAXE_VERSION }}

      - name: Install Libraries
        run: |
          haxelib install hmm --quiet
          haxelib run hmm install --quiet
                      - name: Setup Android NDK
  # You may pin to the exact commit or the version.
  # uses: nttld/setup-ndk@afb4c9964b521afb97c864b7d40b11e6911bd410
  uses: nttld/setup-ndk@v1.5.0
  with:
    # Exact version to use
    ndk-version: r28b
    # Add installation directory to the PATH
    add-to-path: false
    # Add installed NDK to the Android SDK
    link-to-sdk: false
    # Use the local job cache on top of the runner tool cache
    local-cache: # optional, default is false
          
      - name: Install libVLC
        if: inputs.name == 'Linux'
        run: sudo apt install libvlc-dev libvlccore-dev

      - name: Configure Android
        if: inputs.name == 'Android'
        run: |
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT ${{ steps.setup-ndk.outputs.ndk-path }}
          haxelib run lime config JAVA_HOME $JAVA_HOME_17_arm64
          haxelib run lime config ANDROID_SETUP true

      - name: Compile
        run: haxelib run lime build ${{ inputs.buildArgs }}

      - name: Make IPA
        if: inputs.name == 'iOS'
        run: |
          brew install ldid
          cd export/release/ios/build/Release-iphoneos/${{ env.PROJECT_NAME }}.app
          ldid -S../../../${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.entitlements ${{ env.PROJECT_NAME }}
          cd ..
          mkdir Payload
          mv ${{ env.PROJECT_NAME }}.app Payload
          zip -r ${{ env.PROJECT_NAME }}.ipa Payload

      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ${{ inputs.artifactName }}
          path: ${{ inputs.artifactPath }}
          if-no-files-found: error
